// Generated by :tools:generateApis. Do not edit manually.
package dev.jellystack.network.generated.jellyseerr

import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.header
import io.ktor.client.request.request
import io.ktor.http.HttpMethod
import io.ktor.http.path
import io.ktor.http.takeFrom
import kotlinx.serialization.Serializable

/** Minimal status payload confirming server identity. */
@Serializable
data class StatusResponse(
    val version: String,
    val commitTag: String? = null,
)

/** Status client for Jellyseerr onboarding connectivity checks. */
class JellyseerrStatusApi(
    private val client: HttpClient,
    private val baseUrl: String,
    private val apiKey: String?,
) {
    private fun io.ktor.client.request.HttpRequestBuilder.configureUrl(pathSuffix: String) {
        url {
            takeFrom(baseUrl)
            path(pathSuffix.trimStart('/'))
        }
    }

    private fun io.ktor.client.request.HttpRequestBuilder.applyAuth() {
        if (!apiKey.isNullOrBlank()) {
            header("X-Api-Key", apiKey)
        }
    }

    /** Retrieve Jellyseerr status for connectivity verification. */
    suspend fun fetchStatus(): StatusResponse =
        client
            .request {
                method = HttpMethod.Get
                configureUrl("/api/v1/status")
                applyAuth()
            }.body<StatusResponse>()
}
