// Generated by :tools:generateApis. Do not edit manually.
package dev.jellystack.network.generated.jellyfin

import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.path
import io.ktor.http.takeFrom
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/** Credentials payload for the Jellyfin authenticate-by-name endpoint. */
@Serializable
data class AuthenticateByNameRequest(
    @SerialName("Username")
    val username: String,
    @SerialName("Password")
    val password: String,
    @SerialName("Pw")
    val hashedPassword: String? = null, // Optional PBKDF2 hash expected by older Jellyfin servers.
    @SerialName("DeviceId")
    val deviceId: String? = null,
)

/** Minimal user payload nested within login response. */
@Serializable
data class AuthenticateByNameUser(
    @SerialName("Id")
    val id: String,
    @SerialName("Name")
    val name: String? = null,
)

/** Subset of Jellyfin auth response needed for onboarding. */
@Serializable
data class AuthenticateByNameResponse(
    @SerialName("AccessToken")
    val accessToken: String,
    @SerialName("User")
    val user: AuthenticateByNameUser,
    @SerialName("ServerId")
    val serverId: String? = null,
)

/** Authentication client covering Jellyfin credential login flow. */
class JellyfinAuthApi(
    private val client: HttpClient,
    private val baseUrl: String,
) {
    private fun io.ktor.client.request.HttpRequestBuilder.configureUrl(pathSuffix: String) {
        url {
            takeFrom(baseUrl)
            path(pathSuffix.trimStart('/'))
        }
    }

    /** Authenticate a user by username/password and return access token. */
    suspend fun authenticateByName(payload: AuthenticateByNameRequest): AuthenticateByNameResponse =
        client
            .request {
                method = HttpMethod.Post
                configureUrl("/Users/AuthenticateByName")
                contentType(ContentType.Application.Json)
                setBody(payload)
            }.body<AuthenticateByNameResponse>()
}
